Curt Mahoney
9/12/2012
Lab 02 Answers

1)
The entire function main() is copied over into it's child, with the only difference being the value of 'pid'. The variable 'value' is set to 100 initially in both, so the child (with pid==0) subtracts 50 from 'value' while the parent (with pid == the pid of its child), adds 50 to 'value'.

The first time I ran it, it wrote the parent's output first, then the child's. The program is nodeterministic, though, so multiple runs can have varying orders of execution.

2)
#include <stdlib.h>

int main(int argc, char **argv){
	while(1){
		pid_t p = fork();
	}
}

3)
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/wait.h>
#include <sys/types.h>
#include <errno.h>

#include <unistd.h>

int main(int argc, char **argv)
{

	char *cmd[] = { "/bin/ps", "-ef", NULL };

	pid_t pid = fork();
	if(pid==0){
		if (execv(cmd[0], cmd) < 0){
			fprintf(stderr, "execv failed: %s\n", strerror(errno));
		}
	}
	else if(pid==-1){
		return -1; //fork failed
	}
	else{
		int temp;
		waitpid(pid,&temp,0);
		printf("Child process finished\n");
	}	

	return 0;
}

4)

'buffer' is a local array stored on the stack, so returning it's pointer will not be helpful for main(). We also have memory leak from 's' in main(), which is never freed. In order to fix this code, you need to do a malloc() for buffer and then free 'newstr' and 's' in main() as well, as well as adding indcluding stdlib.h for malloc/free.

Fixed code:
#include <stdio.h>
#include <string.h>
#include <ctype.h>

#include <stdlib.h>

char *remove_whitespace(char *s) {
    char *buffer=malloc((strlen(s)+1)*sizeof(char));
    int i = 0, j = 0;
    for ( ; i < strlen(s); i += 1) {
        if (!isspace(s[i])) {
            buffer[j] = s[i];
            j += 1;
        }
    }
    buffer[j] = '\0';
    printf("%s\n", buffer);
    return buffer;
}

int main(int argc, char **argv) {
    char *s = strdup("  the \tinternet\t\nis a series of tubes  ");
    char *newstr = remove_whitespace(s);
    printf("%s\n", newstr);
    free(s);
    free(newstr);
    return 0;
}

5) //Done with entire class
void insert(char *name, struct node **phead){
	struct node *newnode = malloc(sizeof(struct node));
	newnode.name=name;
	newnode->next=*phead; //same as (*newnode).next
	*phead=newnode;
	strncpy(newnode->name,name,127);
}


