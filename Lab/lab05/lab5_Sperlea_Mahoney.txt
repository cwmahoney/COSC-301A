Lab 5 - Adriana Sperlea & Curt Mahoney

2. The program's output is:

CHILD: before 0
CHILD: after 5
PARENT: before 0
PARENT: after 0

The fork creates an entirely new process with it's own memory section, therefore value will be altered within the CHILD, but will remain 0 within the parent.

3. procshare behavior: The children are created with their own memory section, therefore they each increment a different counter to 100000 and output it. In the parent process, the counter is never changed and therefore remains 0. The child processes do not wait for each other to finish, but the parent process waits for both.
   threadshare behavior: The two threads that the process creates are both running in parallel on the 2 CPUs available on the system, and are both accessing the same variable in memory. As each thread tries to increment counter, they pull the value from memory and then push it back to memory incremented by one. However, between the pull and the push, the other thread might have incremented the value several times, so the push actually ignores the other threads incrementations. Because the first thread increments without interference for a slight period of time (simply because it is created earlier in the code) the final value is slightly above the 100000 average expected value from an evenly distributed amount of failed and succesful parallel incrementations.

4. git diff threadshare.c result:
index 29817ba..cba2d12 100644
--- a/labs/lab05/threadshare.c
+++ b/labs/lab05/threadshare.c
@@ -3,6 +3,8 @@
 #include <stdlib.h>
 #include <pthread.h>
 
+pthread_mutex_t happy_mutex;
+
 /**
  * worker thread entry point
  */
@@ -13,14 +15,15 @@ void *worker(void *varg)
     printf("thread 0x%0lx starting\n", (long)pthread_self());
     int i = 0;
     for (; i < 100000; i += 1) {
+               pthread_mutex_lock(&happy_mutex); // lock the mutex
         *counter += 1;
+               pthread_mutex_unlock(&happy_mutex); // unlock the mutex
     }
     printf("thread 0x%0lx ending with counter %ld\n", (long)pthread_self(), *counter);
 
     return NULL;
 }
 
-
 int
 main(int argc, char **argv)
 {
@@ -30,6 +33,7 @@ main(int argc, char **argv)
     long *counter = malloc(sizeof(long));
     *counter = 0UL;
     
+       pthread_mutex_init(&happy_mutex, NULL);
     pthread_create(&thread_a, NULL, worker, counter);
     pthread_create(&thread_b, NULL, worker, counter);
 
@@ -38,6 +42,7 @@ main(int argc, char **argv)
 
     printf("end counter value (main thread): %ld\n", *counter);
 
-    free(counter);
+       pthread_mutex_destroy(&happy_mutex);
+       free(counter);
     return 0;
 }

5. git diff list.? result:
diff --git a/labs/lab05/list.c b/labs/lab05/list.c
index 158fdbc..2ec6470 100644
--- a/labs/lab05/list.c
+++ b/labs/lab05/list.c
@@ -1,10 +1,14 @@
+#include <pthread.h>
 #include "list.h"
 
 /* ************************************** 
  *
  * ************************************** */
+pthread_mutex_t happy_mutex;
+
 void list_init(list_t *list) {
-    list->head = NULL;
+       pthread_mutex_init(&happy_mutex, NULL);
+       list->head = NULL;
 }
 
 
@@ -13,11 +17,13 @@ void list_init(list_t *list) {
  * ************************************** */
 void list_print(list_t *list, FILE *f) {
     printf("*** List Contents Begin ***\n");
+       pthread_mutex_lock(&happy_mutex);
     struct __list_node *tmp = list->head;
     while (tmp) {
         fprintf(f, "%d\n", tmp->data);
         tmp = tmp->next;
     }
+       pthread_mutex_unlock(&happy_mutex);
     printf("*** List Contents End ***\n");
 }
 
@@ -35,6 +41,7 @@ void list_add(list_t *list, int val) {
     new_node->data = val;
     new_node->next = NULL;
 
+       pthread_mutex_lock(&happy_mutex);
     struct __list_node *tmp = list->head;
 
     /* special case: list is currently empty */
@@ -59,6 +66,7 @@ void list_add(list_t *list, int val) {
             tmp->next = new_node;
         }
     }
+       pthread_mutex_unlock(&happy_mutex);
 }
 
 
@@ -69,6 +77,7 @@ void list_add(list_t *list, int val) {
  * ************************************** */
 int list_remove(list_t *list, int target) {
     int removed = 0;
+       pthread_mutex_lock(&happy_mutex);
     /* short cut: is the list empty? */
     if (list->head == NULL)
         return removed;
@@ -87,6 +96,7 @@ int list_remove(list_t *list, int target) {
     /* if we removed anything or the data at the head is greater than
        the target, we're done (since the list is sorted */
     if (removed > 0 || target < tmp->data) {
+               pthread_mutex_unlock(&happy_mutex);
         return removed;
     }
 
@@ -110,7 +120,7 @@ int list_remove(list_t *list, int target) {
             removed += 1;
         }
     }
-
+       pthread_mutex_unlock(&happy_mutex);
     return removed;
 }
 
@@ -120,6 +130,7 @@ int list_remove(list_t *list, int target) {
  * elements.
  * ************************************** */
 void list_clear(list_t *list) {
+       pthread_mutex_lock(&happy_mutex);
     struct __list_node *tmp = list->head;
     while (tmp) {
         struct __list_node *tmp2 = tmp->next;
@@ -127,5 +138,6 @@ void list_clear(list_t *list) {
         tmp = tmp2;
     }
     list->head = NULL;
+       pthread_mutex_unlock(&happy_mutex);
 }
 
diff --git a/labs/lab05/list.o b/labs/lab05/list.o
index 264fcf8..64785b2 100644
Binary files a/labs/lab05/list.o and b/labs/lab05/list.o differ


