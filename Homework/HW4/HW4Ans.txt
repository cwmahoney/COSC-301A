Curtis Mahoney
9/24/12
Worksheet 3: Scheduling
//Sorry about the lateness. I misread/misheard the due date

1) Used an Excel spreadsheet (worked with Laura and Adriana)

Avg Response: 0:31
Avg Turnaround: 1:14
Avg Wait Time: 0:31

2) 

python scheduler.py -l 34,32,18,7,125,48,23,19,89,27,22,52,14,119,17 -p <Scheduler> -c

FIFO: Average -- Response: 282.93  Turnaround 326.00  Wait 282.93

SJF: Average -- Response: 163.33  Turnaround 206.40  Wait 163.33

RR:  Average -- Response: 7.00  Turnaround 366.40  Wait 323.33

a) SJF

b) It could technically be used (kind of), since it is non-preemptive. The cashier could distinguish between smoothie (the longest job by far) and non-smoothie customers, primarily, by asking each upcoming customer whether they want a smoothie and then skipping to the next if they do. Realistically, customers are incredibly unaccustomed to being pushed back in the queue, and would most likely be exceptionally irritated. As far as a full, fully efficient use of SJF goes, it would require that the cashier have perfect knowledge of all of the customer's times, as least roughly, distinguishing between 'Gatecard users, cash users, and credit card users, as well as smoothie-drinkers for each of those three categories. So no, it would probably be best from a business standpoint to just stick with a FIFO system, as that seems "fair" to all customers. Also, smoothies are a cash cow, so you don't want to discourage their purchase.

3) We end up just cutting time by approximately n/L (number of customers over number of lines) on average without in any way dealing with the convoy effect in each of the sub-lines. Short-job customers would still be stuck behind smoothie drinking credit card users once they chose a line.

4) I honestly don't see how this can negatively effect any of these metrics, as compared to FIFO with mutiple queues which jobs get stuck in. Response time, turnaround time, and wait time can only improve as each free cashier is immediately used, as opposed to short jobs possibly waiting behind long jobs due to the convoy effect while a cashier stands idle.

5) No because of the truly frightening costs of cache allocation and reallocation. The key advantage is the instantaneous use of all free CPU time by the most appropriate job as determined by the scheduler, but this is _far_ outweighed by the cost of copying cache's back and forth: between discrete CPU's and some memory allocated to jobs in the global queue, then back to the discrete CPU's ad naseum. A timer-based redistribution of jobs cuts down on CPU waste without wasting cycles on cache copying.
